{"version":3,"file":"realm-shim.min.js","sources":["../src/realmFacade.js","../src/utilities.js","../src/stdlib.js","../src/accessors.js","../src/functions.js","../src/unsafeRec.js","../src/optimizer.js","../src/scopeHandler.js","../src/block-imports.js","../src/evaluators.js","../src/realm.js","../src/commons.js"],"sourcesContent":["// Note: do not import anything to this file to prevent using implicit\n// dependencies.\n\n// buildChildRealm is immediately turned into a string, and this function is\n// never referenced again, because it closes over the wrong intrinsics\n\n// todo: This function is stringified and evaluated outside of the primal\n// realms and it currently can't contain code coverage metrics.\n/* istanbul ignore next */\nfunction buildChildRealm({ initRootRealm, initCompartment, getRealmGlobal, realmEvaluate }) {\n  // This Object and Reflect are brand new, from a new unsafeRec, so no user\n  // code has been run or had a chance to manipulate them. We extract these\n  // properties for brevity, not for security. Don't ever run this function\n  // *after* user code has had a chance to pollute its environment, or it\n  // could be used to gain access to BaseRealm and primal-realm Error\n  // objects.\n  const { defineProperty } = Object;\n\n  const errorConstructors = new Map([\n    ['EvalError', EvalError],\n    ['RangeError', RangeError],\n    ['ReferenceError', ReferenceError],\n    ['SyntaxError', SyntaxError],\n    ['TypeError', TypeError],\n    ['URIError', URIError]\n  ]);\n\n  // Like Realm.apply except that it catches anything thrown and rethrows it\n  // as an Error from this realm\n  function callAndWrapError(target, ...args) {\n    try {\n      return target(...args);\n    } catch (err) {\n      if (Object(err) !== err) {\n        // err is a primitive value, which is safe to rethrow\n        throw err;\n      }\n      let eName, eMessage, eStack;\n      try {\n        // The child environment might seek to use 'err' to reach the\n        // parent's intrinsics and corrupt them. `${err.name}` will cause\n        // string coercion of 'err.name'. If err.name is an object (probably\n        // a String of the parent Realm), the coercion uses\n        // err.name.toString(), which is under the control of the parent. If\n        // err.name were a primitive (e.g. a number), it would use\n        // Number.toString(err.name), using the child's version of Number\n        // (which the child could modify to capture its argument for later\n        // use), however primitives don't have properties like .prototype so\n        // they aren't useful for an attack.\n        eName = `${err.name}`;\n        eMessage = `${err.message}`;\n        eStack = `${err.stack}`;\n        // eName/eMessage/eStack are now child-realm primitive strings, and\n        // safe to expose\n      } catch (ignored) {\n        // if err.name.toString() throws, keep the (parent realm) Error away\n        // from the child\n        throw new Error('unknown error');\n      }\n      const ErrorConstructor = errorConstructors.get(eName) || Error;\n      try {\n        throw new ErrorConstructor(eMessage);\n      } catch (err2) {\n        err2.stack = eStack; // replace with the captured inner stack\n        throw err2;\n      }\n    }\n  }\n\n  class Realm {\n    static makeRootRealm(...args) {\n      const r = new Realm();\n      callAndWrapError(initRootRealm, Realm, r, ...args);\n      return r;\n    }\n\n    static makeCompartment(...args) {\n      const r = new Realm();\n      callAndWrapError(initCompartment, Realm, r, ...args);\n      return r;\n    }\n\n    // we omit the constructor because it is empty. All the personalization\n    // takes place in one of the two static methods,\n    // makeRootRealm/makeCompartment\n\n    get global() {\n      // this is safe against being called with strange 'this' because\n      // baseGetGlobal immediately does a trademark check (it fails unless\n      // this 'this' is present in a weakmap that is only populated with\n      // legitimate Realm instances)\n      return callAndWrapError(getRealmGlobal, this);\n    }\n\n    evaluate(...args) {\n      // safe against strange 'this', as above\n      return callAndWrapError(realmEvaluate, this, ...args);\n    }\n  }\n\n  defineProperty(Realm.prototype, 'toString', {\n    value: () => 'function Realm() { [shim code] }',\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  return Realm;\n}\n\n// the parentheses means we don't bind the 'buildChildRealm' name inside the\n// child's namespace. this would accept an anonymous function declaration.\n// function expression (not a declaration) so it has a completion value.\nconst buildChildRealmString = `'use strict'; (${buildChildRealm})`;\n\nexport function createRealmFacade(unsafeRec, BaseRealm) {\n  const { unsafeEval } = unsafeRec;\n\n  // The BaseRealm is the Realm class created by\n  // the shim. It's only valid for the context where\n  // it was parsed.\n\n  // The Realm facade is a lightweight class built in the\n  // context a different context, that provide a fully\n  // functional Realm class using the intrisics\n  // of that context.\n\n  // This process is simplified because all methods\n  // and properties on a realm instance already return\n  // values using the intrinsics of the realm's context.\n\n  // Invoke the BaseRealm constructor with Realm as the prototype.\n  return unsafeEval(buildChildRealmString)(BaseRealm);\n}\n","// we'd like to abandon, but we can't, so just scream and break a lot of\n// stuff. However, since we aren't really aborting the process, be careful to\n// not throw an Error object which could be captured by child-Realm code and\n// used to access the (too-powerful) primal-realm Error object.\n\nexport function throwTantrum(s, err = undefined) {\n  const msg = `please report internal shim error: ${s}`;\n\n  // note: we really do want to log these 'should never happen' things. there\n  // might be a better way to convince the linter, though.\n  // eslint-disable-next-line no-console\n  console.error(msg);\n  if (err) {\n    // eslint-disable-next-line no-console\n    console.error(`${err}`);\n    // eslint-disable-next-line no-console\n    console.error(`${err.stack}`);\n  }\n\n  // eslint-disable-next-line no-debugger\n  debugger;\n  throw msg;\n}\n\nexport function assert(condition, message) {\n  if (!condition) {\n    throwTantrum(message);\n  }\n}\n","import { getOwnPropertyDescriptor } from './commons';\nimport { assert } from './utilities';\n\n// All the following stdlib items have the same name on both our intrinsics\n// object and on the global object. Unlike Infinity/NaN/undefined, these\n// should all be writable and configurable.\nconst sharedGlobalPropertyNames = [\n  // *** 18.2 Function Properties of the Global Object\n\n  // 'eval', // comes from safeEval instead\n  'isFinite',\n  'isNaN',\n  'parseFloat',\n  'parseInt',\n\n  'decodeURI',\n  'decodeURIComponent',\n  'encodeURI',\n  'encodeURIComponent',\n\n  // *** 18.3 Constructor Properties of the Global Object\n\n  'Array',\n  'ArrayBuffer',\n  'Boolean',\n  'DataView',\n  'Date',\n  'Error',\n  'EvalError',\n  'Float32Array',\n  'Float64Array',\n  // 'Function', // comes from safeFunction instead\n  'Int8Array',\n  'Int16Array',\n  'Int32Array',\n  'Map',\n  'Number',\n  'Object',\n  'Promise',\n  'Proxy',\n  'RangeError',\n  'ReferenceError',\n  'RegExp',\n  'Set',\n  // 'SharedArrayBuffer' // removed on Jan 5, 2018\n  'String',\n  'Symbol',\n  'SyntaxError',\n  'TypeError',\n  'Uint8Array',\n  'Uint8ClampedArray',\n  'Uint16Array',\n  'Uint32Array',\n  'URIError',\n  'WeakMap',\n  'WeakSet',\n\n  // *** 18.4 Other Properties of the Global Object\n\n  // 'Atomics', // removed on Jan 5, 2018\n  'JSON',\n  'Math',\n  'Reflect',\n\n  // *** Annex B\n\n  'escape',\n  'unescape',\n\n  // *** ECMA-402\n\n  'Intl'\n\n  // *** ESNext\n\n  // 'Realm' // Comes from createRealmGlobalObject()\n];\n\nexport function getSharedGlobalDescs(unsafeGlobal) {\n  const descriptors = {\n    // *** 18.1 Value Properties of the Global Object\n    Infinity: { value: Infinity },\n    NaN: { value: NaN },\n    undefined: { value: undefined }\n  };\n\n  for (const name of sharedGlobalPropertyNames) {\n    const desc = getOwnPropertyDescriptor(unsafeGlobal, name);\n    if (desc) {\n      // Abort if an accessor is found on the unsafe global object instead of a\n      // data property. We should never get into this non standard situation.\n      assert('value' in desc, `unexpected accessor on global property: ${name}`);\n\n      descriptors[name] = {\n        value: desc.value,\n        writable: true,\n        configurable: true\n      };\n    }\n  }\n\n  return descriptors;\n}\n","// Adapted from SES/Caja - Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * Replace the legacy accessors of Object to comply with strict mode\n * and ES2016 semantics, we do this by redefining them while in 'use strict'.\n *\n * todo: list the issues resolved\n *\n * This function can be used in two ways: (1) invoked directly to fix the primal\n * realm's Object.prototype, and (2) converted to a string to be executed\n * inside each new RootRealm to fix their Object.prototypes. Evaluation requires\n * the function to have no dependencies, so don't import anything from the outside.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairAccessors() {\n  const {\n    defineProperty,\n    defineProperties,\n    getOwnPropertyDescriptor,\n    getPrototypeOf,\n    prototype: objectPrototype\n  } = Object;\n\n  // On some platforms, the implementation of these functions act as if they are\n  // in sloppy mode: if they're invoked badly, they will expose the global object,\n  // so we need to repair these for security. Thus it is our responsibility to fix\n  // this, and we need to include repairAccessors. E.g. Chrome in 2016.\n\n  try {\n    // Verify that the method is not callable.\n    // eslint-disable-next-line no-restricted-properties, no-underscore-dangle\n    objectPrototype.__lookupGetter__('dummy');\n  } catch (ignore) {\n    // Throws, no need to patch.\n    return;\n  }\n\n  function toObject(obj) {\n    if (obj === undefined || obj === null) {\n      throw new TypeError(`can't convert undefined or null to object`);\n    }\n    return Object(obj);\n  }\n\n  function asPropertyName(obj) {\n    if (typeof obj === 'symbol') {\n      return obj;\n    }\n    return `${obj}`;\n  }\n\n  function aFunction(obj, accessor) {\n    if (typeof obj !== 'function') {\n      throw TypeError(`invalid ${accessor} usage`);\n    }\n    return obj;\n  }\n\n  defineProperties(objectPrototype, {\n    __defineGetter__: {\n      value: function __defineGetter__(prop, func) {\n        const O = toObject(this);\n        defineProperty(O, prop, {\n          get: aFunction(func, 'getter'),\n          enumerable: true,\n          configurable: true\n        });\n      }\n    },\n    __defineSetter__: {\n      value: function __defineSetter__(prop, func) {\n        const O = toObject(this);\n        defineProperty(O, prop, {\n          set: aFunction(func, 'setter'),\n          enumerable: true,\n          configurable: true\n        });\n      }\n    },\n    __lookupGetter__: {\n      value: function __lookupGetter__(prop) {\n        let O = toObject(this);\n        prop = asPropertyName(prop);\n        let desc;\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n          O = getPrototypeOf(O);\n        }\n        return desc && desc.get;\n      }\n    },\n    __lookupSetter__: {\n      value: function __lookupSetter__(prop) {\n        let O = toObject(this);\n        prop = asPropertyName(prop);\n        let desc;\n        while (O && !(desc = getOwnPropertyDescriptor(O, prop))) {\n          O = getPrototypeOf(O);\n        }\n        return desc && desc.set;\n      }\n    }\n  });\n}\n","// Adapted from SES/Caja\n// Copyright (C) 2011 Google Inc.\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/startSES.js\n// https://github.com/google/caja/blob/master/src/com/google/caja/ses/repairES5.js\n\n/**\n * This block replaces the original Function constructor, and the original\n * %GeneratorFunction% %AsyncFunction% and %AsyncGeneratorFunction%, with\n * safe replacements that throw if invoked.\n *\n * These are all reachable via syntax, so it isn't sufficient to just\n * replace global properties with safe versions. Our main goal is to prevent\n * access to the Function constructor through these starting points.\n\n * After this block is done, the originals must no longer be reachable, unless\n * a copy has been made, and funtions can only be created by syntax (using eval)\n * or by invoking a previously saved reference to the originals.\n */\n\n// todo: this file should be moved out to a separate repo and npm module.\nexport function repairFunctions() {\n  const { defineProperty, getPrototypeOf, setPrototypeOf } = Object;\n\n  /**\n   * The process to repair constructors:\n   * 1. Create an instance of the function by evaluating syntax\n   * 2. Obtain the prototype from the instance\n   * 3. Create a substitute tamed constructor\n   * 4. Replace the original constructor with the tamed constructor\n   * 5. Replace tamed constructor prototype property with the original one\n   * 6. Replace its [[Prototype]] slot with the tamed constructor of Function\n   */\n  function repairFunction(name, declaration) {\n    let FunctionInstance;\n    try {\n      // eslint-disable-next-line no-new-func\n      FunctionInstance = (0, eval)(declaration);\n    } catch (e) {\n      if (e instanceof SyntaxError) {\n        // Prevent failure on platforms where async and/or generators are not supported.\n        return;\n      }\n      // Re-throw\n      throw e;\n    }\n    const FunctionPrototype = getPrototypeOf(FunctionInstance);\n\n    // Prevents the evaluation of source when calling constructor on the prototype of functions.\n    // eslint-disable-next-line no-new-func\n    const TamedFunction = Function('throw new TypeError(\"Not available\");');\n    defineProperty(TamedFunction, 'name', { value: name });\n\n    // (new Error()).constructors does not inherit from Function, because Error\n    // was defined before ES6 classes. So we don't need to repair it too.\n\n    // (Error()).constructor inherit from Function, which gets a tamed constructor here.\n\n    // todo: in an ES6 class that does not inherit from anything, what does its\n    // constructor inherit from? We worry that it inherits from Function, in\n    // which case instances could give access to unsafeFunction. markm says\n    // we're fine: the constructor inherits from Object.prototype\n\n    // This line replaces the original constructor in the prototype chain\n    // with the tamed one. No copy of the original is peserved.\n    defineProperty(FunctionPrototype, 'constructor', { value: TamedFunction });\n\n    // This line sets the tamed constructor's prototype data property to\n    // the original one.\n    defineProperty(TamedFunction, 'prototype', { value: FunctionPrototype });\n\n    if (TamedFunction !== Function.prototype.constructor) {\n      // Ensures that all functions meet \"instanceof Function\" in a realm.\n      setPrototypeOf(TamedFunction, Function.prototype.constructor);\n    }\n  }\n\n  // Here, the order of operation is important: Function needs to be repaired\n  // first since the other repaired constructors need to inherit from the tamed\n  // Function function constructor.\n\n  // note: this really wants to be part of the standard, because new\n  // constructors may be added in the future, reachable from syntax, and this\n  // list must be updated to match.\n\n  // \"plain arrow functions\" inherit from Function.prototype\n\n  repairFunction('Function', '(function(){})');\n  repairFunction('GeneratorFunction', '(function*(){})');\n  repairFunction('AsyncFunction', '(async function(){})');\n  repairFunction('AsyncGeneratorFunction', '(async function*(){})');\n}\n","// this module must never be importable outside the Realm shim itself\nimport { getSharedGlobalDescs } from './stdlib';\nimport { repairAccessors } from './accessors';\nimport { repairFunctions } from './functions';\nimport { freeze } from './commons';\n\n// A \"context\" is a fresh unsafe Realm as given to us by existing platforms.\n// We need this to implement the shim. However, when Realms land for real,\n// this feature will be provided by the underlying engine instead.\n\n// Detection used in RollupJS.\nconst isNode = typeof exports === 'object' && typeof module !== 'undefined';\nconst isBrowser = typeof document === 'object';\nif ((!isNode && !isBrowser) || (isNode && isBrowser)) {\n  throw new Error('unexpected platform, unable to create Realm');\n}\nconst vm = isNode ? require('vm') : undefined;\n\n// note: in a node module, the top-level 'this' is not the global object\n// (it's *something* but we aren't sure what), however an indirect eval of\n// 'this' will be the correct global object.\n\nconst unsafeGlobalSrc = \"'use strict'; this\";\nconst unsafeGlobalEvalSrc = `(0, eval)(\"'use strict'; this\")`;\n\nfunction createNewUnsafeGlobalForNode() {\n  // Use unsafeGlobalEvalSrc to ensure we get the right 'this'.\n  const unsafeGlobal = vm.runInNewContext(unsafeGlobalEvalSrc);\n\n  return unsafeGlobal;\n}\n\nfunction createNewUnsafeGlobalForBrowser() {\n  const iframe = document.createElement('iframe');\n  iframe.style.display = 'none';\n\n  document.body.appendChild(iframe);\n  const unsafeGlobal = iframe.contentWindow.eval(unsafeGlobalSrc);\n\n  // We keep the iframe attached to the DOM because removing it\n  // causes its global object to lose intrinsics, its eval()\n  // function to evaluate code, etc.\n\n  // TODO: can we remove and garbage-collect the iframes?\n\n  return unsafeGlobal;\n}\n\n// we only export this so test-repair.js can get an unrepaired\n// Object.prototype, to sense if this platform has the buggy behavior\nexport const getNewUnsafeGlobal = isNode\n  ? createNewUnsafeGlobalForNode\n  : createNewUnsafeGlobalForBrowser;\n\n// The unsafeRec is shim-specific. It acts as the mechanism to obtain a fresh\n// set of intrinsics together with their associated eval and Function\n// evaluators. These must be used as a matched set, since the evaluators are\n// tied to a set of intrinsics, aka the \"undeniables\". If it were possible to\n// mix-and-match them from different contexts, that would enable some\n// attacks.\nfunction createUnsafeRec(unsafeGlobal, allShims) {\n  const sharedGlobalDescs = getSharedGlobalDescs(unsafeGlobal);\n\n  return freeze({\n    unsafeGlobal,\n    sharedGlobalDescs,\n    unsafeEval: unsafeGlobal.eval,\n    unsafeFunction: unsafeGlobal.Function,\n    allShims\n  });\n}\n\nfunction strip(src) {\n  /* START_TESTS_ONLY */\n\n  // Restore eval.\n  src = src.replace(/\\(0,[^)]+\\)/g, '(0, eval)');\n\n  // Remove code coverage.\n  src = src.replace(/cov_[^+]+\\+\\+[;,]/g, '');\n\n  /* END_TESTS_ONLY */\n  return src;\n}\n\nconst repairAccessorsShim = strip(`\"use strict\"; (${repairAccessors})();`);\nconst repairFunctionsShim = strip(`\"use strict\"; (${repairFunctions})();`);\n\n// Create a new unsafeRec from a brand new context, with new intrinsics and a\n// new global object\nexport function createNewUnsafeRec(allShims) {\n  const unsafeGlobal = getNewUnsafeGlobal();\n  unsafeGlobal.eval(repairAccessorsShim);\n  unsafeGlobal.eval(repairFunctionsShim);\n  return createUnsafeRec(unsafeGlobal, allShims);\n}\n\n// Create a new unsafeRec from the current context, where the Realm shim is\n// being parsed and executed, aka the \"Primal Realm\"\nexport function createCurrentUnsafeRec() {\n  const unsafeGlobal = (0, eval)(unsafeGlobalSrc);\n  repairAccessors();\n  repairFunctions();\n  return createUnsafeRec(unsafeGlobal, []);\n}\n","import {\n  arrayFilter,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  objectHasOwnProperty,\n  regexpTest\n} from './commons';\n\n// todo: think about how this interacts with endowments, check for conflicts\n// between the names being optimized and the ones added by endowments\n\n// Admits many (but not all) legal variable names: starts with letter/_/$,\n// continues with letter/digit/_/$. It will reject many legal names that\n// involve unicode characters. \\w is equivalent [a-zA-Z_0-9]\nconst identifierPattern = /^[a-zA-Z_$][\\w$]*$/;\n\nconst keywords = new Set([\n  // actual keywords\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'export',\n  'extends',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'import',\n  'in',\n  'instanceof',\n  'new',\n  'return',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield',\n\n  // future reserved word\n  'enum',\n\n  // future reserved word in strict mode\n  'implements',\n  'package',\n  'protected',\n  'interface',\n  'private',\n  'public',\n\n  // contextual worth refusing\n  'let',\n  'async',\n  'arguments'\n]);\n\n/**\n * getOptimizableGlobals()\n * What variable names might it bring into scope? These include all\n * property names which can be variable names, including the names\n * of inherited properties. It excludes symbols and names which are\n * keywords. We drop symbols safely. Currently, this shim refuses\n * service if any of the names are keywords or keyword-like. This is\n * safe and only prevent performance optimization.\n */\nexport function getOptimizableGlobals(safeGlobal) {\n  const descs = getOwnPropertyDescriptors(safeGlobal);\n\n  // getOwnPropertyNames does ignore Symbols so we don't need this extra check:\n  // typeof name === 'string' &&\n  const constants = arrayFilter(getOwnPropertyNames(descs), name => {\n    // Ensure we have a valid identifier. We use regexpTest rather than\n    // /../.test() to guard against the case where RegExp has been poisoned.\n    if (name === 'eval' || keywords.has(name) || !regexpTest(identifierPattern, name)) {\n      return false;\n    }\n\n    const desc = descs[name];\n    return (\n      //\n      // The getters will not have .writable, don't let the falsyness of\n      // 'undefined' trick us: test with === false, not ! . However descriptors\n      // inherit from the (potentially poisoned) global object, so we might see\n      // extra properties which weren't really there. Accessor properties have\n      // 'get/set/enumerable/configurable', while data properties have\n      // 'value/writable/enumerable/configurable'.\n      desc.configurable === false &&\n      desc.writable === false &&\n      //\n      // Checks for data properties because they're the only ones we can\n      // optimize (accessors are most likely non-constant). Descriptors can't\n      // can't have accessors and value properties at the same time, therefore\n      // this check is sufficient. Using explicit own property deal with the\n      // case where Object.prototype has been poisoned.\n      objectHasOwnProperty(desc, 'value')\n    );\n  });\n\n  return constants;\n}\n","import {\n  freeze,\n  getOwnPropertyDescriptor,\n  getPrototypeOf,\n  objectHasOwnProperty\n} from './commons';\nimport { throwTantrum } from './utilities';\n\n/**\n * alwaysThrowHandler is a proxy handler which throws on any trap called.\n * It's made from a proxy with a get trap that throws. Its target is\n * an immutable (frozen) object and is safe to share.\n */\nconst alwaysThrowHandler = new Proxy(freeze({}), {\n  get(target, prop) {\n    throwTantrum(`unexpected scope handler trap called: ${prop}`);\n  }\n});\n\n/**\n * ScopeHandler manages a Proxy which serves as the global scope for the\n * safeEvaluator operation (the Proxy is the argument of a 'with' binding).\n * As described in createSafeEvaluator(), it has several functions:\n * - allow the very first (and only the very first) use of 'eval' to map to\n *   the real (unsafe) eval function, so it acts as a 'direct eval' and can\n *    access its lexical scope (which maps to the 'with' binding, which the\n *   ScopeHandler also controls).\n * - ensure that all subsequent uses of 'eval' map to the safeEvaluator,\n *   which lives as the 'eval' property of the safeGlobal.\n * - route all other property lookups at the safeGlobal.\n * - hide the unsafeGlobal which lives on the scope chain above the 'with'.\n * - ensure the Proxy invariants despite some global properties being frozen.\n */\nexport function createScopeHandler(unsafeRec) {\n  const { unsafeGlobal, unsafeEval } = unsafeRec;\n\n  // This flag allow us to determine if the eval() call is an done by the\n  // realm's code or if it is user-land invocation, so we can react differently.\n  let useUnsafeEvaluator = false;\n\n  let scopedEvaluatorMemo = undefined;\n\n  return {\n    // The scope handler throws if any trap other than get/set/has are run\n    // (e.g. getOwnPropertyDescriptors, apply, getPrototypeOf).\n    // eslint-disable-next-line no-proto\n    __proto__: alwaysThrowHandler,\n\n    allowUnsafeEvaluatorOnce() {\n      useUnsafeEvaluator = true;\n    },\n\n    unsafeEvaluatorAllowed() {\n      return useUnsafeEvaluator;\n    },\n\n    getScopedEvaluatorMemo() {\n      return scopedEvaluatorMemo;\n    },\n    memoScopedEvaluator(newScopedEvaluator) {\n      scopedEvaluatorMemo = newScopedEvaluator;\n    },\n\n    get(target, prop) {\n      // Special treatment for eval. The very first lookup of 'eval' gets the\n      // unsafe (real direct) eval, so it will get the lexical scope that uses\n      // the 'with' context.\n      if (prop === 'eval') {\n        // test that it is true rather than merely truthy\n        if (useUnsafeEvaluator === true) {\n          // revoke before use\n          useUnsafeEvaluator = false;\n          return unsafeEval;\n        }\n        return target.eval;\n      }\n\n      // todo: shim integrity, capture Symbol.unscopables\n      if (prop === Symbol.unscopables) {\n        // Safe to return a primal realm Object here because the only code that\n        // can do a get() on a non-string is the internals of with() itself,\n        // and the only thing it does is to look for properties on it. User\n        // code cannot do a lookup on non-strings.\n        return undefined;\n      }\n\n      // Properties of the global.\n      if (prop in target) {\n\n        const desc = getOwnPropertyDescriptor(getPrototypeOf(target), prop);\n        if (desc && desc.writable === false && desc.configurable === false) {\n          scopedEvaluatorMemo = undefined;\n        }\n        \n        return target[prop];\n      }\n\n      // Prevent the lookup for other properties.\n      return undefined;\n    },\n\n    // eslint-disable-next-line class-methods-use-this\n    set(target, prop, value) {\n      // todo: allow modifications when target.hasOwnProperty(prop) and it\n      // is writable, assuming we've already rejected overlap (see\n      // createSafeEvaluatorFactory.factory). This TypeError gets replaced with\n      // target[prop] = value\n      if (objectHasOwnProperty(target, prop)) {\n        // todo: shim integrity: TypeError, String\n        throw new TypeError(`do not modify endowments like ${String(prop)}`);\n      }\n\n      // todo (optimization): keep a reference to the shadow avoids calling\n      // getPrototypeOf on the target every time the set trap is invoked,\n      // since safeGlobal === getPrototypeOf(target).\n      getPrototypeOf(target)[prop] = value;\n\n      // Return true after successful set.\n      return true;\n    },\n\n    // we need has() to return false for some names to prevent the lookup  from\n    // climbing the scope chain and eventually reaching the unsafeGlobal\n    // object, which is bad.\n\n    // note: unscopables! every string in Object[Symbol.unscopables]\n\n    // todo: we'd like to just have has() return true for everything, and then\n    // use get() to raise a ReferenceError for anything not on the safe global.\n    // But we want to be compatible with ReferenceError in the normal case and\n    // the lack of ReferenceError in the 'typeof' case. Must either reliably\n    // distinguish these two cases (the trap behavior might be different), or\n    // we rely on a mandatory source-to-source transform to change 'typeof abc'\n    // to XXX. We already need a mandatory parse to prevent the 'import',\n    // since it's a special form instead of merely being a global variable/\n\n    // note: if we make has() return true always, then we must implement a\n    // set() trap to avoid subverting the protection of strict mode (it would\n    // accept assignments to undefined globals, when it ought to throw\n    // ReferenceError for such assignments)\n\n    has(target, prop) {\n      // proxies stringify 'prop', so no TOCTTOU danger here\n\n      // unsafeGlobal: hide all properties of unsafeGlobal at the expense of 'typeof'\n      // being wrong for those properties. For example, in the browser, evaluating\n      // 'document = 3', will add a property to  safeGlobal instead of throwing a\n      // ReferenceError.\n      if (prop === 'eval' || prop in target || prop in unsafeGlobal) {\n        return true;\n      }\n\n      return false;\n    }\n  };\n}\n","// this \\s *must* match all kinds of syntax-defined whitespace. If e.g.\n// U+2028 (LINE SEPARATOR) or U+2029 (PARAGRAPH SEPARATOR) is treated as\n// whitespace by the parser, but not matched by /\\s/, then this would admit\n// an attack like: import\\u2028('power.js') . We're trying to distinguish\n// something like that from something like importnotreally('power.js') which\n// is perfectly safe.\n\nconst scanner = /^(.*)\\bimport\\s*(\\(|\\/\\/|\\/\\*)/m;\n\nexport function rejectImportExpressions(s) {\n  const matches = scanner.exec(s);\n  if (matches) {\n    // todo: if we have a full parser available, use it here. If there is no\n    // 'import' token in the string, we're safe.\n    // if (!parse(s).contains('import')) return;\n    const linenum = matches[1].split('\\n').length; // more or less\n    throw new SyntaxError(`possible import expression rejected around line ${linenum}`);\n  }\n}\n","// Portions adapted from V8 - Copyright 2016 the V8 project authors.\n// https://github.com/v8/v8/blob/master/src/builtins/builtins-function.cc\n\nimport {\n  apply,\n  arrayJoin,\n  arrayPop,\n  create,\n  defineProperty,\n  getOwnPropertyDescriptors,\n  getPrototypeOf,\n  setPrototypeOf,\n  stringIncludes\n} from './commons';\nimport { getOptimizableGlobals } from './optimizer';\nimport { createScopeHandler } from './scopeHandler';\nimport { rejectImportExpressions } from './block-imports';\nimport { assert, throwTantrum } from './utilities';\n\nfunction buildOptimizer(constants) {\n  // No need to build an oprimizer when there are no constants.\n  if (constants.length === 0) return '';\n  // Use 'this' to avoid going through the scope proxy, which is unecessary\n  // since the optimizer only needs references to the safe global.\n  return `const {${arrayJoin(constants, ',')}} = this;`;\n}\n\nfunction createScopedEvaluatorFactory(unsafeRec, constants) {\n  const { unsafeFunction } = unsafeRec;\n\n  const optimizer = buildOptimizer(constants);\n\n  // Create a function in sloppy mode, so that we can use 'with'. It returns\n  // a function in strict mode that evaluates the provided code using direct\n  // eval, and thus in strict mode in the same scope. We must be very careful\n  // to not create new names in this scope\n\n  // 1: we use 'with' (around a Proxy) to catch all free variable names. The\n  // first 'arguments[0]' holds the Proxy which safely wraps the safeGlobal\n  // 2: 'optimizer' catches common variable names for speed\n  // 3: The inner strict function is effectively passed two parameters:\n  //    a) its arguments[0] is the source to be directly evaluated.\n  //    b) its 'this' is the this binding seen by the code being directly evaluated.\n\n  // everything in the 'optimizer' string is looked up in the proxy\n  // (including an 'arguments[0]', which points at the Proxy). 'function' is\n  // a keyword, not a variable, so it is not looked up. then 'eval' is looked\n  // up in the proxy, that's the first time it is looked up after\n  // useUnsafeEvaluator is turned on, so the proxy returns the real the\n  // unsafeEval, which satisfies the IsDirectEvalTrap predicate, so it uses\n  // the direct eval and gets the lexical scope. The second 'arguments[0]' is\n  // looked up in the context of the inner function. The *contents* of\n  // arguments[0], because we're using direct eval, are looked up in the\n  // Proxy, by which point the useUnsafeEvaluator switch has been flipped\n  // back to 'false', so any instances of 'eval' in that string will get the\n  // safe evaluator.\n\n  return unsafeFunction(`\n    with (arguments[0]) {\n      ${optimizer}\n      return function() {\n        'use strict';\n        return eval(arguments[0]);\n      };\n    }\n  `);\n}\n\nexport function createSafeEvaluatorFactory(unsafeRec, safeGlobal) {\n  const { unsafeFunction } = unsafeRec;\n\n  const scopeHandler = createScopeHandler(unsafeRec);\n  \n  function factory(endowments = {}) {\n\n    // We use the the concise method syntax to create an eval without a\n    // [[Construct]] behavior (such that the invocation \"new eval()\" throws\n    // TypeError: eval is not a constructor\"), but which still accepts a\n    // 'this' binding.\n    const safeEval = {\n      eval(src) {\n\n        let scopedEvaluator = scopeHandler.getScopedEvaluatorMemo();\n\n        if (scopedEvaluator === undefined) {\n          const constants = getOptimizableGlobals(safeGlobal);\n          const scopedEvaluatorFactory = createScopedEvaluatorFactory(unsafeRec, constants);\n\n          // todo (shim limitation): scan endowments, throw error if endowment\n          // overlaps with the const optimization (which would otherwise\n          // incorrectly shadow endowments), or if endowments includes 'eval'. Also\n          // prohibit accessor properties (to be able to consistently explain\n          // things in terms of shimming the global lexical scope).\n          // writeable-vs-nonwritable == let-vs-const, but there's no\n          // global-lexical-scope equivalent of an accessor, outside what we can\n          // explain/spec\n          const scopeTarget = create(safeGlobal, getOwnPropertyDescriptors(endowments));\n          const scopeProxy = new Proxy(scopeTarget, scopeHandler);\n          scopedEvaluator = apply(scopedEvaluatorFactory, safeGlobal, [scopeProxy]);\n\n          if (constants.length >= 1) {\n            scopeHandler.memoScopedEvaluator(scopedEvaluator);\n          }\n        }\n\n        src = `${src}`;\n        rejectImportExpressions(src);\n        scopeHandler.allowUnsafeEvaluatorOnce();\n        let err;\n        try {\n          // Ensure that \"this\" resolves to the safe global.\n          return apply(scopedEvaluator, safeGlobal, [src]);\n        } catch (e) {\n          // stash the child-code error in hopes of debugging the internal failure\n          err = e;\n          throw e;\n        } finally {\n          // belt and suspenders: the proxy switches this off immediately after\n          // the first access, but if that's not the case we abort.\n          if (scopeHandler.unsafeEvaluatorAllowed()) {\n            throwTantrum('handler did not revoke useUnsafeEvaluator', err);\n          }\n        }\n      }\n    }.eval;\n\n    // safeEval's prototype is currently the primal realm's\n    // Function.prototype, which we must not let escape. To make 'eval\n    // instanceof Function' be true inside the realm, we need to point it at\n    // the RootRealm's value.\n\n    // Ensure that eval from any compartment in a root realm is an instance\n    // of Function in any compartment of the same root realm.\n    setPrototypeOf(safeEval, unsafeFunction.prototype);\n\n    assert(getPrototypeOf(safeEval).constructor !== Function, 'hide Function');\n    assert(getPrototypeOf(safeEval).constructor !== unsafeFunction, 'hide unsafeFunction');\n\n    // note: be careful to not leak our primal Function.prototype by setting\n    // this to a plain arrow function. Now that we have safeEval, use it.\n    defineProperty(safeEval, 'toString', {\n      value: safeEval(\"() => 'function eval() { [shim code] }'\"),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    return safeEval;\n  }\n\n  return factory;\n}\n\nexport function createSafeEvaluator(safeEvaluatorFactory) {\n  return safeEvaluatorFactory();\n}\n\nexport function createSafeEvaluatorWhichTakesEndowments(safeEvaluatorFactory) {\n  return (x, endowments) => safeEvaluatorFactory(endowments)(x);\n}\n\n/**\n * A safe version of the native Function which relies on\n * the safety of evalEvaluator for confinement.\n */\nexport function createFunctionEvaluator(unsafeRec, safeEval) {\n  const { unsafeFunction, unsafeGlobal } = unsafeRec;\n\n  const safeFunction = function Function(...params) {\n    const functionBody = `${arrayPop(params) || ''}`;\n    let functionParams = `${arrayJoin(params, ',')}`;\n\n    // Is this a real functionBody, or is someone attempting an injection\n    // attack? This will throw a SyntaxError if the string is not actually a\n    // function body. We coerce the body into a real string above to prevent\n    // someone from passing an object with a toString() that returns a safe\n    // string the first time, but an evil string the second time.\n    // eslint-disable-next-line no-new, new-cap\n    new unsafeFunction(functionBody);\n\n    if (stringIncludes(functionParams, ')')) {\n      // If the formal parameters string include ) - an illegal\n      // character - it may make the combined function expression\n      // compile. We avoid this problem by checking for this early on.\n\n      // note: v8 throws just like this does, but chrome accepts e.g. 'a = new Date()'\n      throw new unsafeGlobal.SyntaxError(\n        'shim limitation: Function arg string contains parenthesis'\n      );\n      // todo: shim integrity threat if they change SyntaxError\n    }\n\n    // todo: check to make sure this .length is safe. markm says safe.\n    if (functionParams.length > 0) {\n      // If the formal parameters include an unbalanced block comment, the\n      // function must be rejected. Since JavaScript does not allow nested\n      // comments we can include a trailing block comment to catch this.\n      functionParams += '\\n/*``*/';\n    }\n\n    // todo: fix `this` binding in Function().\n    const src = `(function(${functionParams}){\\n${functionBody}\\n})`;\n\n    return safeEval(src);\n  };\n\n  // Ensure that Function from any compartment in a root realm can be used\n  // with instance checks in any compartment of the same root realm.\n  setPrototypeOf(safeFunction, unsafeFunction.prototype);\n\n  assert(getPrototypeOf(safeFunction).constructor !== Function, 'hide Function');\n  assert(getPrototypeOf(safeFunction).constructor !== unsafeFunction, 'hide unsafeFunction');\n\n  // Ensure that any function created in any compartment in a root realm is an\n  // instance of Function in any compartment of the same root ralm.\n  defineProperty(safeFunction, 'prototype', { value: unsafeFunction.prototype });\n\n  // Provide a custom output without overwriting the Function.prototype.toString\n  // which is called by some third-party libraries.\n  defineProperty(safeFunction, 'toString', {\n    value: safeEval(\"() => 'function Function() { [shim code] }'\"),\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  return safeFunction;\n}\n","import { createRealmFacade } from './realmFacade';\nimport { createNewUnsafeRec, createCurrentUnsafeRec } from './unsafeRec';\nimport {\n  createSafeEvaluatorFactory,\n  createSafeEvaluator,\n  createSafeEvaluatorWhichTakesEndowments,\n  createFunctionEvaluator\n} from './evaluators';\nimport { create, defineProperty, defineProperties, freeze, arrayConcat } from './commons';\n\n// Create a registry to mimic a private static members on the realm classes.\n// We define it in the same module and do not export it.\n\nconst UnsafeRecForRealmClass = new WeakMap();\n\nfunction getUnsafeRecForRealmClass(RealmClass) {\n  if (Object(RealmClass) !== RealmClass) {\n    // Detect non-objects.\n    throw new TypeError('internal error: bad object, not a Realm constructor');\n  }\n  // spec just says throw TypeError\n  // todo: but shim should include a message\n  if (!UnsafeRecForRealmClass.has(RealmClass)) {\n    // RealmClass has no unsafeRec. Shoud not proceed.\n    throw new TypeError('internal error: bad object');\n  }\n  return UnsafeRecForRealmClass.get(RealmClass);\n}\n\nfunction registerUnsafeRecForRealmClass(RealmClass, unsafeRec) {\n  if (Object(RealmClass) !== RealmClass) {\n    // Detect non-objects.\n    throw new TypeError('internal error: bad object, not a Realm constructor');\n  }\n  // spec just says throw TypeError\n  // todo: but shim should include a message\n  if (UnsafeRecForRealmClass.has(RealmClass)) {\n    // Attempt to change an existing unsafeRec on a Realm. Shoud not proceed.\n    throw new TypeError('internal error: bad object');\n  }\n  UnsafeRecForRealmClass.set(RealmClass, unsafeRec);\n}\n\n// Create a registry to mimic a private members on the realm imtances.\n// We define it in the same module and do not export it.\n\nconst RealmRecForRealmInstance = new WeakMap();\n\nfunction getRealmRecForRealmInstance(realm) {\n  if (Object(realm) !== realm) {\n    // Detect non-objects.\n    throw new TypeError('bad object, not a Realm instance');\n  }\n  if (!RealmRecForRealmInstance.has(realm)) {\n    // Realm instance has no realmRec. Should not proceed.\n    throw new TypeError(\n      'bad object, use Realm.makeRootRealm() or .makeCompartment() instead of \"new Realm\"'\n    );\n  }\n  return RealmRecForRealmInstance.get(realm);\n}\n\nfunction registerRealmRecForRealmInstance(realm, realmRec) {\n  if (Object(realm) !== realm) {\n    // Detect non-objects.\n    throw new TypeError('internal error: bad object, not a Realm instance');\n  }\n  if (RealmRecForRealmInstance.has(realm)) {\n    // Attempt to change an existing realmRec on a realm instance. Should not proceed.\n    throw new TypeError('internal error: Realm instance is already present');\n  }\n  RealmRecForRealmInstance.set(realm, realmRec);\n}\n\n// Initialize the global variables for the new Realm.\nfunction setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction) {\n  defineProperties(safeGlobal, sharedGlobalDescs);\n\n  defineProperty(safeGlobal, 'eval', {\n    value: safeEval,\n    writable: true,\n    configurable: true\n  });\n\n  defineProperty(safeGlobal, 'Function', {\n    value: safeFunction,\n    writable: true,\n    configurable: true\n  });\n}\n\nfunction createRealmRec(unsafeRec) {\n  const { sharedGlobalDescs, unsafeGlobal } = unsafeRec;\n\n  const safeGlobal = create(unsafeGlobal.Object.prototype);\n  const safeEvaluatorFactory = createSafeEvaluatorFactory(unsafeRec, safeGlobal);\n  const safeEval = createSafeEvaluator(safeEvaluatorFactory);\n  const safeEvalWhichTakesEndowments = createSafeEvaluatorWhichTakesEndowments(\n    safeEvaluatorFactory\n  );\n  const safeFunction = createFunctionEvaluator(unsafeRec, safeEval);\n\n  setDefaultBindings(sharedGlobalDescs, safeGlobal, safeEval, safeFunction);\n\n  const realmRec = freeze({\n    safeGlobal,\n    safeEval,\n    safeEvalWhichTakesEndowments,\n    safeFunction\n  });\n\n  return realmRec;\n}\n\nfunction initRootRealm(selfClass, self, options) {\n  options = Object(options); // Todo: sanitize\n  // note: 'self' is the instance of the Realm, and 'selfClass' is the\n  // Realm constructor (facade) we build in buildChildRealm().\n\n  // In 'undefined' mode, intrinics are not provided, we create a root\n  // realm using the fresh set of new intrinics from a new context.\n\n  // todo: investigate attacks via Array.species\n  const newShims = options.shims || [];\n  const { allShims: oldShims } = getUnsafeRecForRealmClass(selfClass);\n  // todo: this accepts newShims='string', but it should reject that\n  const allShims = arrayConcat(oldShims, newShims);\n\n  // The unsafe record is returned with its constructors repaired.\n  const unsafeRec = createNewUnsafeRec(allShims);\n\n  // Define Realm onto new sharedGlobalDescs, so it can be copied onto the\n  // safeGlobal like the rest of the .\n  // eslint-disable-next-line no-use-before-define\n  const Realm = createRealmGlobalObject(unsafeRec);\n  registerUnsafeRecForRealmClass(Realm, unsafeRec);\n\n  const realmRec = createRealmRec(unsafeRec);\n  registerRealmRecForRealmInstance(self, realmRec);\n  // Now run all shims in the new RootRealm. We don't do this for\n  // compartments\n  for (const shim of allShims) {\n    // eslint-disable-next-line no-use-before-define\n    realmEvaluate(self, shim);\n  }\n}\n\nfunction initCompartment(selfClass, self) {\n  // note: 'self' is the instance of the Realm, and 'selfClass' is the\n  // Realm constructor (facade) we build in buildChildRealm().\n\n  // In \"inherit\" mode, we create a compartment realm and inherit\n  // the context since we share the intrinsics. We create a new\n  // set to allow us to define eval() and Function() for the realm.\n  const unsafeRec = getUnsafeRecForRealmClass(selfClass);\n\n  const realmRec = createRealmRec(unsafeRec);\n  registerRealmRecForRealmInstance(self, realmRec);\n}\n\nfunction getRealmGlobal(self) {\n  const { safeGlobal } = getRealmRecForRealmInstance(self);\n  return safeGlobal;\n}\n\nfunction realmEvaluate(self, x, endowments = {}) {\n  // todo: don't pass in primal-realm objects like {}, for safety. OTOH its\n  // properties are copied onto the new global 'target'.\n  // todo: figure out a way to membrane away the contents to safety.\n  const { safeEvalWhichTakesEndowments } = getRealmRecForRealmInstance(self);\n  return safeEvalWhichTakesEndowments(x, endowments);\n}\n\n// Define Realm onto new sharedGlobalDescs, so it can be defined in the\n// safeGlobal like the rest of the shared globals.\nfunction createRealmGlobalObject(unsafeRec) {\n  const Realm = createRealmFacade(unsafeRec, {\n    initRootRealm,\n    initCompartment,\n    getRealmGlobal,\n    realmEvaluate\n  });\n  unsafeRec.sharedGlobalDescs.Realm = {\n    value: Realm,\n    writable: true,\n    configurable: true\n  };\n  return Realm;\n}\n\n// Create the current unsafeRec from the current \"primal\" realm (the realm\n// where the Realm shim is loaded and executed).\nconst currentUnsafeRec = createCurrentUnsafeRec();\nconst Realm = createRealmFacade(currentUnsafeRec, {\n  initRootRealm,\n  initCompartment,\n  getRealmGlobal,\n  realmEvaluate\n});\nregisterUnsafeRecForRealmClass(Realm, currentUnsafeRec);\n\nexport default Realm;\n","// Declare shorthand functions. Sharing these declarations across modules\n// improves both consistency and minification. Unused declarations are\n// dropped by the tree shaking process.\n\n// we capture these, not just for brevity, but for security. If any code\n// modifies Object to change what 'assign' points to, the Realm shim would be\n// corrupted.\n\nexport const {\n  assign,\n  create,\n  defineProperties,\n  defineProperty,\n  freeze,\n  getOwnPropertyDescriptor,\n  getOwnPropertyDescriptors,\n  getOwnPropertyNames,\n  getPrototypeOf,\n  setPrototypeOf\n} = Object;\n\nexport const {\n  apply,\n  ownKeys // Reflect.ownKeys includes Symbols and unenumerables, unlike Object.keys()\n} = Reflect;\n\n/**\n * uncurryThis()\n * See http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n * which only lives at http://web.archive.org/web/20160805225710/http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\n *\n * Performance:\n * 1. The native call is about 10x faster on FF than chrome\n * 2. The version using Function.bind() is about 100x slower on FF, equal on chrome, 2x slower on Safari\n * 3. The version using a spread and Reflect.apply() is about 10x slower on FF, equal on chrome, 2x slower on Safari\n *\n * const bind = Function.prototype.bind;\n * const uncurryThis = bind.bind(bind.call);\n */\nconst uncurryThis = fn => (thisArg, ...args) => apply(fn, thisArg, args);\n\n// We also capture these for security: changes to Array.prototype after the\n// Realm shim runs shouldn't affect subsequent Realm operations.\nexport const objectHasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty),\n  arrayForEach = uncurryThis(Array.prototype.forEach),\n  arrayFilter = uncurryThis(Array.prototype.filter),\n  arrayPush = uncurryThis(Array.prototype.push),\n  arrayPop = uncurryThis(Array.prototype.pop),\n  arrayJoin = uncurryThis(Array.prototype.join),\n  arrayConcat = uncurryThis(Array.prototype.concat),\n  regexpTest = uncurryThis(RegExp.prototype.test),\n  stringMatch = uncurryThis(String.prototype.match),\n  stringIncludes = uncurryThis(String.prototype.includes);\n"],"names":["createRealmFacade","unsafeRec","BaseRealm","unsafeEval","buildChildRealmString","throwTantrum","s","err","msg","console","error","stack","assert","condition","message","getSharedGlobalDescs","unsafeGlobal","descriptors","Infinity","value","NaN","undefined","name","sharedGlobalPropertyNames","desc","getOwnPropertyDescriptor","writable","configurable","repairAccessors","toObject","obj","TypeError","Object","asPropertyName","aFunction","accessor","defineProperty","defineProperties","getPrototypeOf","prototype","objectPrototype","__lookupGetter__","ignore","__defineGetter__","prop","func","O","get","enumerable","__defineSetter__","set","__lookupSetter__","repairFunctions","repairFunction","declaration","FunctionInstance","eval","e","SyntaxError","FunctionPrototype","TamedFunction","Function","constructor","setPrototypeOf","createUnsafeRec","allShims","sharedGlobalDescs","freeze","unsafeFunction","strip","src","createNewUnsafeRec","getNewUnsafeGlobal","repairAccessorsShim","repairFunctionsShim","getOptimizableGlobals","safeGlobal","descs","getOwnPropertyDescriptors","constants","arrayFilter","getOwnPropertyNames","keywords","has","regexpTest","identifierPattern","objectHasOwnProperty","createScopeHandler","scopedEvaluatorMemo","useUnsafeEvaluator","__proto__","alwaysThrowHandler","allowUnsafeEvaluatorOnce","unsafeEvaluatorAllowed","getScopedEvaluatorMemo","memoScopedEvaluator","newScopedEvaluator","target","Symbol","unscopables","rejectImportExpressions","matches","scanner","exec","linenum","split","length","buildOptimizer","arrayJoin","createScopedEvaluatorFactory","optimizer","createSafeEvaluatorFactory","scopeHandler","endowments","safeEval","scopedEvaluator","scopedEvaluatorFactory","scopeTarget","create","scopeProxy","Proxy","apply","createSafeEvaluator","safeEvaluatorFactory","createSafeEvaluatorWhichTakesEndowments","x","createFunctionEvaluator","safeFunction","params","functionBody","arrayPop","functionParams","stringIncludes","getUnsafeRecForRealmClass","RealmClass","UnsafeRecForRealmClass","registerUnsafeRecForRealmClass","getRealmRecForRealmInstance","realm","RealmRecForRealmInstance","registerRealmRecForRealmInstance","realmRec","setDefaultBindings","createRealmRec","safeEvalWhichTakesEndowments","initRootRealm","selfClass","self","options","newShims","shims","oldShims","arrayConcat","Realm","createRealmGlobalObject","shim","realmEvaluate","initCompartment","getRealmGlobal","callAndWrapError","args","eName","eMessage","eStack","ignored","Error","ErrorConstructor","errorConstructors","err2","Map","EvalError","RangeError","ReferenceError","URIError","makeRootRealm","r","makeCompartment","global","evaluate","assign","ownKeys","Reflect","uncurryThis","fn","thisArg","hasOwnProperty","Array","filter","pop","join","concat","RegExp","test","String","includes","isNode","exports","module","isBrowser","document","vm","require","unsafeGlobalEvalSrc","runInNewContext","iframe","createElement","style","display","body","appendChild","contentWindow","Set","WeakMap","currentUnsafeRec"],"mappings":"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"}